" Name:         vimrc.local
" Description:  vim productivity improvements
" Version:      1.0.27
" Date:         2024-11-19
" Copyright:    2021+ Kenneth Aaron , flyingrhino AT orcon DOT net DOT nz
" License:      GPLv3
" Github:       https://github.com/flyingrhinonz/vimrc_linux

" Usage tips can be found at the end of this file.


set encoding=utf-8
scriptencoding utf-8
    " ^ These two lines above solve the problem of vim not reading the unicode chars
    "       in the :  `set listchars`  directive below.
    "   These should be the first lines in the script.
    "   However, as per the help for:  `:scriptencoding`  if you set the:  `encoding`  option
    "       in your vimrc,  `:scriptencoding`  must be placed after that.
    "   Explained below:
    "       `encoding` is for the editor itself
    "       `fileencoding` is for the buffer
    "       `scriptencoding` is for vim scripts


syntax on
colorscheme default

" Syntax highlighting makes reading some text impossible in vimdiff mode.
" Disable syntax highlighting in vimdiff mode:
if &diff
    syntax off
endif



set bg=dark
set autoindent      " ai  in short
set nobackup
set number
set showcmd
set showmatch

set scrolloff=5
    " ^ Number of lines to display above/below when scrolling lines

set sidescroll=4
    " ^ Number of chars to scroll horizontally. Default is half a page.

set sidescrolloff=20
    " ^ Number of chars to display at the left/right edge before scrolling horizontally.

autocmd BufReadPost * if line("'\"") > 0 && line ("'\"") <= line("$") | exe "normal! g'\"" | endif
    " ^ Tell vim to remember and jump to the last cursor line (regardless whether you did an edit or not) when reopening a file



" Settings that help search:

set hlsearch
    " ^ Highlight search results

set incsearch
    " ^ Show search results as you type

nnoremap <F3> 0y^/^<C-R>0\s\@!<CR>
    " ^ Setup F3 key (in command mode) to search for the next line which has the same
    "       indent level as the current line the cursor is on right now.
    "   In essence this sets up a search pattern for leading whitespace
    "       (which is also highlighed - just like any other search), therefore you can then
    "       search forward and backward with:  n (next down)  and:  N (next up).
    "   To get rid of the highlight (as with any other search) - simply search for some junk
    "       text which doesn't exist - this yields no results and the highlighting is gone.
    "   Taken from here and credit to Ben for the answer:
    "       https://stackoverflow.com/questions/27248788/how-to-move-to-lines-with-the-same-indentation-in-gvim-or-any-other-text-editin
    "   Command explained:
    "       0y^     Jumps to the beginning of the line and yanks to the first text on the line
    "       /^      Starts a search beginning at the start of a line
    "       <C-R>0  Places the yanked text (the indentation) into the search pattern
    "       \s\@!   Requires that the text after the matched indentation is not further whitespace (see :help /zero-width)
    "       <CR>    Performs the search
    "   Note this will fail on lines with no indent since there is nothing to copy between
    "       the beginning of the line and the first text on the line.
    "   It will also stop working when you get to a line with only indent, although it can reach those lines.



set backspace=indent,eol,start
    " ^ Sensible backspace behavior
    "   See here: https://vi.stackexchange.com/questions/2162/why-doesnt-the-backspace-key-work-in-insert-mode
    "   indent    allow backspacing over autoindent
    "   eol       allow backspacing over line breaks (join lines)
    "   allow backspacing over the start of insert; CTRL-W and CTRL-U stop once at the start of insert

set visualbell
    " ^ Use visualbell (screen flash) instead of beep

set t_vb=
    " ^ Disable the screen flash completely.
    "       Note - both the settings above are required if you want to disable
    "       both beeping and flashing.



" The following changes come from making everything tabs->spaces, not only python.
" This effectively replaces the commented python code later on:

set tabstop=4       " ts  in short
    " ^ Tab key is now 4 chars rather than the traditional 8 chars which wastes
    "       too much space when indenting.

set expandtab       " et  in short
    " ^ Inserts spaces whenever TAB key is pressed
    "       If you want to insert a real tab char - use:  ctrl-v <TAB_KEY>

set shiftwidth=4        " sw  in short
    " ^ Sets the number of space characters inserted for indentation

set softtabstop=4       " sts  in short
    " ^ Makes the spaces feel like real tabs



set list
    " ^ list & listchars mostly useful to find leading tabs at the beginning of python code

set listchars=extends:>,precedes:<,nbsp:☠,tab:▸␣
    " ^ The chars are:
    "   extends -   Show the '>' char in long nonwrapped lines at the right
    "   precedes -  Show the '<' char in long nonwrappled lines at the left
    "   nbsp -      Show the special char instead of a non-breakable space
    "   tab -       Shows the special char instead of the tab char
    "   trail -     Sets the trailing spaces char. I don't use this because
    "               I'm using the:  ExtraWhitespace config later on
    "   Note - The above directive doesn't work on old vim versions and gives an error
    "       similar to:  `E474: Invalid argument: listchars=extends:>,precedes: ...`
    "       If you comment it out on its own - you'll end up with vim adding formatting
    "       signs (such as:  `$`  at the end of lines). To disable this behavior - also
    "       comment out the earlier:  `set list`  directive.
    "       In new vim versions if you get a similar looking error - look at the:  `encoding`
    "       directives at the top of this file.

highlight NonText ctermfg=yellow ctermbg=blue
    " ^ Change the colors for the nontext listchars I configured above (extends & precedes)
    "   To view the current highlight groups and their set colors use:
    "       :so $VIMRUNTIME/syntax/hitest.vim   inside vim

" highlight NonText ctermfg=yellow ctermbg=17
    " ^ Can also use 256 color numeric codes in cterm?? per:
    "       https://jonasjacek.github.io/colors/
    "       https://commons.wikimedia.org/wiki/File:Xterm_256color_chart.svg

highlight EndOfBuffer ctermfg=grey ctermbg=black
    " ^ To set the color of the:  '~'  at the end of the file (only supported in vim 8+)

set nowrap
    " ^ We can disable default wrap because I've now got indicators for lines
    "       that are longer than the screen fits.



" The following section defines the line numbering colors and cursor line highlighting.
" Note - the colors defined here work well when viewed inside a 256+ color terminal.
"   If you edit a file directly on the device console you will most likely see degraded colors
"   or even missing/wrong colors. Don't be surprised by this and try to fix vimrc, it's probably
"   the console that can't handle the colors defined herein.

set cursorline
    " ^ Enables cursor line position tracking

highlight clear CursorLine
    " ^ Removes the underline caused by enabling cursorline

highlight CursorLine guibg=#00005f ctermbg=17

"highlight CursorLine guibg=#00005f ctermbg=darkblue
    " ^ Dark blue background on the current cursor line
    " ^ Can be specified as number or color name

"highlight CursorLine guibg=#262626 ctermbg=235
    " ^ Dark gray background on the current cursor line

highlight clear CursorLineNr
    " ^ In new vim versions the cursor line number is separated from CursorLine
    "       and without this the cursor line number will still be underlined.

highlight LineNr ctermfg=blue

highlight CursorLineNR ctermbg=red ctermfg=white
    " ^ Sets the line numbering to a clear background



" Support for yaml format:
autocmd Filetype yaml setlocal
    \ expandtab
    \ cursorcolumn
    \ tabstop=2
    \ shiftwidth=2
    \ softtabstop=2
    " ^ cursorcolumn (cuc  in short) is a vertical line at the cursor position.
    "   Can be very annoying, so I only enabled it for yaml because the indentation
    "       is only 2 spaces and easy to miss. Disable within vim with:  :set nocuc
    "   Uses:  highlight CursorColumn  that I configured later on to choose the
    "       color of the vertical bar.



" Extra white space tips from here:
" http://vim.wikia.com/wiki/Highlight_unwanted_spaces :

highlight ExtraWhitespace ctermbg=red guibg=red

match ExtraWhitespace /\s\+$/
    " ^ Any whitespace - even on empty lines

" match ExtraWhitespace /\S\zs\s\+$/
    " ^ Whitespace only after some text

" autocmd BufWinEnter * match ExtraWhitespace /\s\+$/

autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/

autocmd InsertLeave * match ExtraWhitespace /\s\+$/
    " ^ Any whitespace

" autocmd InsertLeave * match ExtraWhitespace /\S\zs\s\+$/
    " ^ Only after some text

" autocmd BufWinLeave * call clearmatches()

autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
    " ^^^ Disable auto insert comment on a new line after a comment in the line above.
    "     This doesn't work if there isn't an empty .vimrc in your home dir.
    "     Similar situation to disabling mouse in vim.



" These settings highlight a vertical cursor column:

" set cursorcolumn
    " ^ This turns on a vertical bar at the cursor position. By default if you
    "       don't use:  highlight CursorColumn  to set the color - it uses the
    "       default colorscheme color for that.
    "   This can be very annoying so I only use it for yaml files (see yaml section above).

highlight CursorColumn ctermbg=235
    " ^ Only if:  set cursorcolumn  has been enabled, this command sets the
    "       color of the vertical bar to the color you define here.
    "   Because I didn't enable:  set cursorcolumn  in general, this command has
    "       no effect on all files (only on yaml files where I did enable set cursorcolumn).
    "   This sets a dark gray vertical bar at the cursor position. Doesn't affect text colors
    "       and is darker than visual select background color (ctrl or shift v).
    "   The color codes for greyscale are 232 (very dark, almost black) to 255 (white)
    "       documented here:  https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg

" highlight CursorColumn ctermbg=Red
    " ^ Same as above but an example how to use color names instead of color codes.

" highlight CursorColumn ctermfg=White ctermbg=Yellow cterm=bold guifg=white guibg=yellow gui=bold
    " ^ In terminal this results in a vertical bar which is all white text on a yellow background.
    "       The current char under the cursor maintains its own colorscheme color.

" highlight CursorColumn ctermfg=Black ctermbg=Yellow cterm=bold guifg=Black guibg=yellow gui=NONE
    " ^ In terminal this results in a vertical bar which is all black text on a yellow background.
    "       The current char under the cursor maintains its own colorscheme color.



" The following additions can been made to support python editing in vim:

" autocmd Filetype python setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4

" Or as individual lines:
" autocmd Filetype python setlocal
"   \ expandtab
"   \ tabstop=4
"   \ shiftwidth=4
"   \ softtabstop=4
"   \ list
"   \ listchars=nbsp:☠,tab:▸␣
"   "\ listchars=nbsp:.,tab:>-  " Option using non-unicode chars
    " ^ However I've modified the default behavior for this so it is enforced everywhere



"   Troubleshooting tips:
"   =====================
"
"   Paste from clipboard without the crazy indentation:
"       :set paste      - disables all sorts of stuff to allow regular paste.
"       :set nopaste    - returns you to how things were before.
"
"
"   When using vim (with or without this ken custom config file) - if you are getting
"       all sorts of unexpected behavior in vim - touch an empty:  .vimrc  in your home dir.
"       Make sure this file is created as your own user/group so that you have permissions to read it.
"   This solves all sorts of problems like:
"       Disabling mouse in vim.
"       Works with FileType to disable some unwanted behaviors.
"       Disabling auto comment on new line.
"       Disabling auto wrap at 80 char line length.
"       Plugin-defined indentation - especially unexpected yaml editing behavior.
"
"   Another solution to seeing wierd chars in your terminal is missing utf-8 support. Fix it with:
"       Add this to your:  `~/.bashrc`  file:  `export LANG=en_US.UTF-8`  (or a language of your choice).
"
"   Indentation problems:
"       If you're encountering all sorts of issues with indentation (I've seen this on
"           rhel 8 and fedora 35) - paste this into vim to see who last changed indentation settings:
"           :verbose set ai? cin? cink? cino? si? inde? indk?
"

