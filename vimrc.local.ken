" Name:         vimrc.local
" Description:  vim productivity improvements
" Version:      1.0.17
" Date:         2022-03-25
" By:           Kenneth Aaron , flyingrhino AT orcon DOT net DOT nz
" Github:       https://github.com/flyingrhinonz/vimrc_linux
" License:      GPLv3

" Usage tips can be found at the end of this file.

syntax on
colorscheme default

" Syntax highlighting makes reading some text impossible in vimdiff mode.
" Disable syntax highlighting in vimdiff mode:
if &diff
    syntax off
endif

set bg=dark
set autoindent
set nobackup
set number
set showcmd
set showmatch

set scrolloff=5
    " ^ Number of lines to display above/below when scrolling lines
set sidescroll=4
    " ^ Number of chars to scroll horizontally. Default is half a page.
set sidescrolloff=20
    " ^ Number of chars to display at the left/right edge before scrolling horizontally.
set hlsearch
    " ^ Highlight search results
set incsearch
    " ^ Show search results as you type
set backspace=indent,eol,start
    " ^ Sensible backspace behavior
    "   See here: https://vi.stackexchange.com/questions/2162/why-doesnt-the-backspace-key-work-in-insert-mode
    "   indent    allow backspacing over autoindent
    "   eol       allow backspacing over line breaks (join lines)
    "   allow backspacing over the start of insert; CTRL-W and CTRL-U stop once at the start of insert

set visualbell
    " ^ Use visualbell (screen flash) instead of beep
set t_vb=
    " ^ Disable the screen flash completely.
    "       Note - both the settings above are required if you want to disable
    "       both beeping and flashing.


" The following changes come from making everything tabs->spaces, not only python.
" This effectively replaces the commented python code later on:
set tabstop=4
    " ^ Tab key is now 4 chars rather than the traditional 8 chars which wastes
    "       too much space when indenting.
set expandtab
    " ^ Inserts spaces whenever TAB key is pressed
    "       If you want to insert a real tab char - use:  ctrl-v <TAB_KEY>
set shiftwidth=4
    " ^ Sets the number of space characters inserted for indentation
set softtabstop=4
    " ^ Makes the spaces feel like real tabs

set list
    " ^ list & listchars mostly useful to find leading tabs at the beginning of python code
set listchars=extends:>,precedes:<,nbsp:☠,tab:▸␣
    " ^ The chars are:
    "   extends -   Show the '>' char in long nonwrapped lines at the right
    "   precedes -  Show the '<' char in long nonwrappled lines at the left
    "   nbsp -      Show the special char instead of a non-breakable space
    "   tab -       Shows the special char instead of the tab char

highlight NonText ctermfg=yellow ctermbg=blue
    " ^ Change the colors for the nontext listchars I configured above (extends & precedes)
    "   To view the current highlight groups and their set colors use:
    "       :so $VIMRUNTIME/syntax/hitest.vim   inside vim

" highlight NonText ctermfg=yellow ctermbg=17
    " ^ Can also use 256 color numeric codes per: https://jonasjacek.github.io/colors/

highlight EndOfBuffer ctermfg=grey ctermbg=black
    " ^ To set the color of the:  '~'  at the end of the file (only supported in vim 8+)

set nowrap
    " ^ We can disable default wrap because I've now got indicators for lines
    "       that are longer than the screen fits.


" The following section defines the line numbering colors.
" Note - the colors defined here work well when viewed inside a 256+ color terminal.
"   If you edit a file directly on the device console you will most likely see degraded colors
"   or even missing/wrong colors. Don't be surprised by this and try to fix vimrc, it's probably
"   the console that can't handle the colors defined herein.
set cursorline
    " ^ Enables cursor line position tracking
highlight clear CursorLine
    " ^ Removes the underline caused by enabling cursorline
highlight clear CursorLineNr
    " ^ In new vim versions the cursor line number is separated from CursorLine
    "       and without this the cursor line number will still be underlined.
highlight LineNr ctermfg=blue
highlight CursorLineNR ctermbg=red ctermfg=white
    " ^ Sets the line numbering to a clear background


" Support for yaml format:
autocmd Filetype yaml setlocal
    \ expandtab
    \ tabstop=2
    \ shiftwidth=2
    \ softtabstop=2


" Extra white space tips from here:
" http://vim.wikia.com/wiki/Highlight_unwanted_spaces  :
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
    " ^ Any whitespace - even on empty lines
" match ExtraWhitespace /\S\zs\s\+$/
    " ^ Whitespace only after some text
" autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
    " ^ Any whitespace
" autocmd InsertLeave * match ExtraWhitespace /\S\zs\s\+$/
    " ^ Only after some text
" autocmd BufWinLeave * call clearmatches()

autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
    " ^^^ Disable auto insert comment on a new line after a comment in the line above.
    "     This doesn't work if there isn't an empty .vimrc in your home dir.
    "     Similar situation to disabling mouse in vim.

" These settings highlight a vertical cursor column:
" set cursorcolumn
" highlight CursorColumn ctermfg=White ctermbg=Yellow cterm=bold guifg=white guibg=yellow gui=bold
" highlight CursorColumn ctermfg=Black ctermbg=Yellow cterm=bold guifg=Black guibg=yellow gui=NONE

" The following additions can been made to support python editing in vim:
" autocmd Filetype python setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4
" Or as individual lines:
" autocmd Filetype python setlocal
"   \ expandtab
"   \ tabstop=4
"   \ shiftwidth=4
"   \ softtabstop=4
"   \ list
"   \ listchars=nbsp:☠,tab:▸␣
"   "\ listchars=nbsp:.,tab:>-  " Option using non-unicode chars
" However I've modified the default behavior for this so it is enforced everywhere


"   Troubleshooting tips:
"   =====================
"
"   Indentation problems:
"       If you're encountering all sorts of issues with indentation (I've seen this on
"           rhel 8 and fedora 35) - paste this into vim to see who last changed indentation settings:
"           :verbose set ai? cin? cink? cino? si? inde? indk?
"
"   Paste from clipboard without the crazy indentation:
"       :set paste      - disables all sorts of stuff to allow regular paste.
"       :set nopaste    - returns you to how things were before.
"
"
"   When using vim (with or without this custom config file) - if you are getting
"       all sorts of unexpected behavior in vim - make an empty .vimrc in your home dir.
"

